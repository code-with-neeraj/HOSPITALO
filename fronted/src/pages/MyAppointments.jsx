// Import React and useContext hook
import React, { useContext } from "react";
// Import AppContext to access global state and functions
import { AppContext } from "../context/AppContext";
// Import axios for HTTP requests
import axios from "axios";
// Import toast for showing notifications
import { toast } from "react-toastify";
// Import useEffect hook for side effects
import { useEffect } from "react";
// Import useState hook for state management
import { useState } from "react";
// Import useNavigate for navigation
import { useNavigate } from "react-router-dom";

// Define the MyAppointments functional component
const MyAppointments = () => {
  // Destructure backendUrl, token, and getDoctorsData from AppContext
  const { backendUrl, token, getDoctorsData } = useContext(AppContext);

  // State to store the user's appointments
  const [appointments, setAppointments] = useState([]);
  // Array of month abbreviations for formatting dates
  const months = [
    "",
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
  ];

  // Function to format slot date from 'day_month_year' to readable format
  const slotDateFormat = (slotDate) => {
    const dateArray = slotDate.split("_"); // Split the date string by '_'
    return (
      dateArray[0] + " " + months[Number(dateArray[1])] + " " + dateArray[2]
    ); // Format as 'day Month year'
  };

  // Initialize navigate function for programmatic navigation
  const navigate = useNavigate();

  // Function to fetch user appointments from the server
  const getUserAppointments = async () => {
    try {
      // Send GET request to fetch appointments
      const { data } = await axios.get(backendUrl + "/api/user/appointments", {
        headers: { token },
      });

      if (data.success) {
        // If successful, update appointments state with the fetched data
        setAppointments(data.appointments.reverse());
        console.log(data.appointments);
      }
    } catch (error) {
      console.log(error);
      // Show error notification in case of an error
      toast.error(error.message);
    }
  };

  // Function to cancel an appointment
  const cancelAppointment = async (appointmentId) => {
    try {
      // Send POST request to cancel the appointment with the given appointmentId
      const { data } = await axios.post(
        backendUrl + "/api/user/cancel-appointment",
        { appointmentId },
        { headers: { token } }
      );
      if (data.success) {
        // Show success message if cancellation is successful
        toast.success(data.message);
        // Refresh the user's appointments list
        getUserAppointments();
        // Refresh the doctors data
        getDoctorsData();
      } else {
        // Show error message if cancellation fails
        toast.error(data.message);
      }
    } catch (error) {
      console.log(error); // Log any errors
      // Show error message for any other errors
      toast.error(error.message);
    }
  };

  // Function to initiate Razorpay payment
  const initPay = (order) => {
    const options = {
      key: import.meta.env.VITE_RAZORPAY_KEY_ID, // Razorpay key ID from environment variables
      amount: order.amount, // Amount to be paid
      currency: order.currency, // Currency code
      name: "Appointment Payment", // Name of the business
      description: "Appointment Payment", // Description of the payment
      order_id: order.id, // Order ID generated by Razorpay
      receipt: order.receipt, // Receipt ID
      handler: async (response) => {
        console.log(response);

        try {
          // Send POST request to verify the payment with Razorpay response
          const { data } = await axios.post(
            backendUrl + "/api/user/verifyRazorpay",
            response,
            { headers: { token } }
          );
          if (data.success) {
            // If successful, refresh the appointments and navigate to 'my-appointments' page
            getUserAppointments();
            navigate("/my-appointments");
          }
        } catch (error) {
          console.log(error);
          // Show error notification in case of an error
          toast.error(error.message);
        }
      },
    };

    // Create a new Razorpay payment window with the specified options
    const rzp = new window.Razorpay(options);
    // Open the Razorpay payment modal
    rzp.open();
  };

  // Function to initiate Razorpay payment for a specific appointment
  const appointmentRazorpay = async (appointmentId) => {
    try {
      // Send a POST request to backend to create a Razorpay order for the appointment
      const { data } = await axios.post(
        backendUrl + "/api/user/payment-razorpay",
        { appointmentId },
        { headers: { token } }
      );

      if (data.success) {
        // If successful, initialize payment with the order details
        initPay(data.order);
      }
    } catch (error) {
      console.log(error); // Log any errors
    }
  };

  // useEffect to fetch user appointments when the component mounts or when token changes
  useEffect(() => {
    if (token) {
      getUserAppointments();
    }
  }, [token]);

  return (
    <div>
      <p className="pb-3 mt-12 font-medium text-zinc-700  border-b">
        My appointments
      </p>
      <div>
        {appointments.map((item, index) => (
          <div
            className="grid grid-cols-[1fr_2fr] gap-4 sm:flex sm:gap-6 py-2 border-b"
            key={index}
          >
            <div>
              <img
                className="w-32 bg-indigo-50"
                src={item.docData.image}
                alt=""
              />
            </div>
            <div className="flex-1 text-sm text-zinc-600">
              <p className="text-neutral-800 font-semibold">
                {item.docData.name}
              </p>
              <p>{item.docData.speciality}</p>
              <p className="text-zinc-700 font-medium mt-1">Address</p>
              <p className="text-xs">{item.docData.address.line1}</p>
              <p className="text-xs">{item.docData.address.line2}</p>
              <p className="text-xs mt-1">
                <span className="text-sm text-neutral-700 font-medium">
                  Date & Time:
                </span>{" "}
                {slotDateFormat(item.slotDate)} | {item.slotTime}
              </p>
            </div>
            <div></div>
            <div className="flex flex-col gap-2 justify-end">
              {!item.cancelled && item.payment && !item.isCompleted && (
                <button className="sm:min-w-48 py-2 border rounded text-lg text-stone-100 bg-green-400">
                  Paid
                </button>
              )}
              {!item.cancelled && !item.payment && !item.isCompleted && (
                <button
                  onClick={() => appointmentRazorpay(item._id)}
                  className="text-sm text-stone-500 text-center sm:min-w-48 py-2 border rounded hover:bg-[#5f6FFF] hover:text-white transition-all duration-300"
                >
                  Pay Online
                </button>
              )}
              {!item.cancelled && !item.isCompleted && (
                <button
                  onClick={() => cancelAppointment(item._id)}
                  className="text-sm text-stone-500 text-center sm:min-w-48 py-2 border rounded hover:bg-red-600 hover:text-white transition-all duration-300"
                >
                  Cancel appointments
                </button>
              )}
              {item.cancelled && !item.isCompleted && (
                <button className="sm:min-w-48 py-2 border border-red-500 rounded text-red-500">
                  Appointment cancelled
                </button>
              )}
              {item.isCompleted && (
                <button className="sm:min-w-48 py-2 border  border-green-500 rounded text-green-500">
                  Completed
                </button>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default MyAppointments;
